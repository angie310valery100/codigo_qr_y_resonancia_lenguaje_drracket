#lang racket
(require (lib "graphics.ss" "graphics"))
(open-graphics)
(define life (open-viewport "alimentos" 550 500))
((draw-solid-rectangle life)(make-posn 5 5) 500 40 "gray")
(define pixeles (vector (make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)
                        (make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)
                        (make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)(make-vector 30)))
;conatdor em guarda el numero de errores
(define nro 0)
(define contador 0)
(define producto 1)
((draw-string life) (make-posn 10 30) "PRODUCTO" "black")
((draw-string life) (make-posn 110 30) "CODIGO" "black")
((draw-string life) (make-posn 180 30) "ERRORES" "black")
((draw-string life) (make-posn 262 30) "PRODUCTO" "black")
((draw-string life) (make-posn 353 30) "CODIGO" "black")
((draw-string life) (make-posn 425 30) "ERRORES" "black")
;dibuja las lineas del cuadro
(define (lineas y x)
  (if (<= y 405)
      (begin
        ((draw-line life) (make-posn  x y) (make-posn 503 y))
        (lineas (+ y 40) x)
        )
      (begin
        ((draw-rectangle life) (make-posn 255 x) 250 450 "black")
        ((draw-rectangle life) (make-posn x x) 250 450 "black")
        ((draw-line life) (make-posn  100 453) (make-posn 100 x))
        ((draw-line life) (make-posn  175 453) (make-posn 175 x))
        ((draw-line life) (make-posn  350 453) (make-posn 350 x))
        ((draw-line life) (make-posn  420 453) (make-posn 420 x))
        )))
(lineas 45 5)

;-------------------------------------------alimentos---------------------------------------- 
(define (alimentos)
        (arreglo 0 0)
  ((draw-string life) (make-posn 12 70) "PAPA" "black")
        (alimentos1 125 50 0 0 200 70);1
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 12 110) "AGUACATE" "black")
        (alimentos1 125 90 0 0 200 110);2
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 12 150) "PAPAYA" "black")
        (alimentos1 125 130 0 0 200 150);3
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 12 190) "BANANO" "black")
        (alimentos1 125 170 0 0 200 190);4
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 12 230) "SANDIA" "black")
        (alimentos1 125 210 0 0 200 230);5
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 12 270) "LIMON" "black")
        (alimentos1 125 250 0 0 200 270);6
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 12 310) "NARANJA" "black")
        (alimentos1 125 290 0 0 200 310);7
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 12 350) "LULO" "black")
        (alimentos1 125 330 0 0 200 350);8
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 9 390) "MARACUYA" "black")
        (alimentos1 125 370 0 0 200 390);9
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 12 430) "MANGO" "black")
        (alimentos1 125 410 0 0 200 430);10
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 70) "DURAZNO" "black")
        (alimentos2 370 50 0 0 450 70);11
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 110) "PERA" "black")
        (alimentos2 370 90 0 0 450 110);12
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 150) "MANZANA" "black")
        (alimentos2 370 130 0 0 450 150);13
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 190) "UVA" "black")
        (alimentos2 370 170 0 0 450 190);14
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 230) "MORA" "black")
        (alimentos2 370 210 0 0 450 230);15
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 270) "FRESA" "black")
        (alimentos2 370 250 0 0 450 270);16
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 310) "PIÃ‘A" "black")
        (alimentos2 370 290 0 0 450 310);17
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 350) "CERESA" "black")
        (alimentos2 370 330 0 0 450 350);18
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 390) "COCO" "black")
        (alimentos2 370 370 0 0 450 390);19
        (set! contador 0)
        (arreglo2 0 0)
        (arreglo 0 0)
  ((draw-string life) (make-posn 260 430) "CIRUELA" "black")
        (alimentos2 370 410 0 0 450 430);20
       
  
  (void))
;------------------------------------------------------------------------------------------

(define (arreglo i f)
  (set! nro (random 1 3))
  (if (<= f 29)
      (if (<= i 29)
          (begin
            (vector-set! (vector-ref pixeles f)i nro)
             (arreglo (+ i 1)f))
          (begin
            (arreglo 0 (+ f 1))
          ))
      (void)
   ))
(define (errores y1 x1)
          (if (= y1 6)
              (begin
                (if (= x1 1)
                    (if (= (vector-ref (vector-ref pixeles y1)x1)2)
                        (set! contador (+ contador 1))
                        (void))
                    (void))
                (if (= x1 3)
                    (if (= (vector-ref (vector-ref pixeles y1)x1)2)
                        (set! contador (+ contador 1))
                        (void))
                    (void))
                (if (= x1 24)
                    (if (= (vector-ref (vector-ref pixeles y1)x1)2)
                        (set! contador (+ contador 1))
                        (void))
                    (void)))
              (void)
              ))

(define (arreglo2 i f)
  (if (<= f 29)
      (if (<= i 29)
          (begin
            (vector-set! (vector-ref pixeles f)i 0)
             (arreglo2 (+ i 1)f))
          (begin
            (arreglo2 0 (+ f 1))
          ))
      (void)))

(define (recuadro y1 x1 x y)
  (if (= y1 0)
      (if (= x1 23)
          (begin
            ((draw-solid-rectangle life)(make-posn x y ) 7 7 "black")
            ((draw-solid-rectangle life)(make-posn (+ x 1) (+ y 1 ) ) 5 5 "white")
            ((draw-solid-rectangle life)(make-posn (+ x 2) (+ y 2 ) ) 3 3 "black")
            
            )
          (void))
      (void)))

(define (alimentos1 x y x1 y1 x2 y2)
  (set! nro (random 1 3))
  (if (<= y1 29)
  (if (<= x1 29)
      (if (= (vector-ref (vector-ref pixeles y1)x1) 1)
          (begin
            ;(display (vector-ref (vector-ref pixeles y1)x1))
            ;(display " ")
            (errores y1 x1)
            
            ((draw-solid-rectangle life)(make-posn x y) 1 1 "black")
            (alimentos1 (+ x 1) y (+ x1 1) y1 x2 y2)
          )
          (begin
            ;(display (vector-ref (vector-ref pixeles y1)x1))
            ;(display " ")
            (errores y1 x1)
            
           ;((draw-solid-rectangle life)(make-posn x y) 1 1 "white")
            (alimentos1 (+ x 1) y (+ x1 1) y1 x2 y2)
          )
       )
        (alimentos1 125 (+ y 1) 0 (+ y1 1) x2 y2)
       )
  (if (= contador 1)
      ((draw-string life) (make-posn x2 y2) "1" "black")
      (if (= contador 2)
          ((draw-string life) (make-posn x2 y2) "2" "black")
          (if (= contador 3)
              ((draw-string life) (make-posn x2 y2) "3" "black")
             (void) )))
  )
(recuadro y1 x1 x y)
  )
(define (alimentos2 x y x1 y1 x2 y2)
  (set! nro (random 1 3))
  (if (<= y1 29)
  (if (<= x1 29)
      (if (= (vector-ref (vector-ref pixeles y1)x1) 1)
          (begin
            ;(display (vector-ref (vector-ref pixeles y1)x1))
            ;(display " ")
            (errores y1 x1)
            ((draw-solid-rectangle life)(make-posn x y) 1 1 "black")
            (alimentos2 (+ x 1) y (+ x1 1) y1 x2 y2)
          )
          (begin
            ;(display (vector-ref (vector-ref pixeles y1)x1))
            ;(display " ")
            (errores y1 x1)
            ((draw-solid-rectangle life)(make-posn x y) 1 1 "white")
            (alimentos2 (+ x 1) y (+ x1 1) y1 x2 y2)
          )
       )
        (alimentos2 370 (+ y 1) 0 (+ y1 1) x2 y2)
       )
  (if (= contador 1)
      ((draw-string life) (make-posn x2 y2) "1" "black")
      (if (= contador 2)
          ((draw-string life) (make-posn x2 y2) "2" "black")
          (if (= contador 3)
              ((draw-string life) (make-posn x2 y2) "3" "black")
              ((draw-string life) (make-posn x2 y2) "0" "black"))))
  )
(recuadro y1 x1 x y)
  )
(alimentos)